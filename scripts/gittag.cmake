#!/usr/bin/cmake -P
#
# Headless script to generate git versioning with only cmake installed
#

set(VERSION_FILENAME "version.h")
execute_process(COMMAND git describe --tags --always HEAD OUTPUT_VARIABLE GIT_TAG OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND git rev-parse --short HEAD OUTPUT_VARIABLE GIT_COMMIT OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND git rev-parse --abbrev-ref HEAD OUTPUT_VARIABLE GIT_BRANCH OUTPUT_STRIP_TRAILING_WHITESPACE)

file(WRITE ${VERSION_FILENAME}  "//\n")
file(APPEND ${VERSION_FILENAME} "// Do not edit!\n")
file(APPEND ${VERSION_FILENAME} "// This file is auto generated by gittag.cmake.\n")
file(APPEND ${VERSION_FILENAME} "//\n")
file(APPEND ${VERSION_FILENAME} "\n")
file(APPEND ${VERSION_FILENAME} "#ifndef RC_INVOKED\n")
file(APPEND ${VERSION_FILENAME} "namespace xb2at {\n")
file(APPEND ${VERSION_FILENAME} "namespace version {\n")
if("${GIT_BRANCH}" STREQUAL "master")
	# master/stable releases
	file(APPEND ${VERSION_FILENAME} "\tconstexpr static char tag[] = \"${GIT_TAG}\";\n")
else()
	file(APPEND ${VERSION_FILENAME} "\tconstexpr static char tag[] = \"${GIT_TAG}-${GIT_COMMIT}-${GIT_BRANCH}\";\n")
endif()

file(APPEND ${VERSION_FILENAME} "\tconstexpr static char branch[] = \"${GIT_BRANCH}\";")
file(APPEND ${VERSION_FILENAME} "\n}")
file(APPEND ${VERSION_FILENAME} "\n}\n")
file(APPEND ${VERSION_FILENAME} "#else\n")

file(APPEND ${VERSION_FILENAME} "// Legacy macros for stamping Windows binaries\n")
file(APPEND ${VERSION_FILENAME} "// with the Git tag/commit/brnach in their version manifest.\n")

if("${GIT_BRANCH}" STREQUAL "master")
	file(APPEND ${VERSION_FILENAME} "\t#define GIT_TAG \"${GIT_TAG}\"\n")
else()
	file(APPEND ${VERSION_FILENAME} "\t#define GIT_TAG \"${GIT_TAG}-${GIT_COMMIT}-${GIT_BRANCH}\";\n")
endif()
file(APPEND ${VERSION_FILENAME} "\t#define GIT_BRANCH \"${GIT_BRANCH}\"\n")
file(APPEND ${VERSION_FILENAME} "#endif\n")

message(STATUS "Generated ${VERSION_FILENAME} for commit ${GIT_COMMIT} on tag ${GIT_TAG} on branch ${GIT_BRANCH}.")